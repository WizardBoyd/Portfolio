[{"content":"\u003ch1 id=\"introduction\"\u003eIntroduction\u003c/h1\u003e\n\u003cp\u003eI go through the math\u0026rsquo;s behind what makes a clock tick including the positioning of the handles and basic triganometry.\u003c/p\u003e\n\u003ch2 id=\"inspiration\"\u003eInspiration\u003c/h2\u003e\n\u003cp\u003eThe inspiration for this post came from a blog article by \u003ca href=\"https://catlikecoding.com/unity/tutorials/basics/game-objects-and-scripts/\"\u003eCatlikeCoding\u003c/a\u003e on basic game objects in unity.\u003c/p\u003e\n\u003cp\u003eI wanted to document my expirence and what I learnt by going through this\u003c/p\u003e\n\u003ch2 id=\"trigonometry\"\u003eTrigonometry\u003c/h2\u003e\n\u003cp\u003ebefore going through this guide I knew about concepts like cos(x) and sin(x), however I had no clue on how they related to other concepts such as circles/angles/etc..\u003c/p\u003e\n\u003cp\u003eafter going through the guide I have gained a better understanding of these basic trigonometry functions\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/blogs/MathUnitCirlceGeogabra.gif\" alt=\"UnitCircleGif\"\u003e\u003c/p\u003e\n\u003cp\u003e$$[ \\theta = (90 - 30i) \\left(\\frac{\\pi}{180}\\right) ]$$\nThe angle (or theta) is offset by 90 so it starts at the 12/midnight handle this converts the angle to a usable radian value.\u003c/p\u003e\n\u003cp\u003eThe X and Y values can then be calculated given the angle at a certain interval.\u003c/p\u003e\n\u003cp\u003e$$[ x_i = R \\cos(\\theta) ]\n[ y_i = R \\sin(\\theta) ]$$\u003c/p\u003e\n\u003cp\u003ewhich gives us the vector position of.\n$$\\mathbf{v} = \\langle x_i, y_i \\rangle$$\u003c/p\u003e\n\u003ch1 id=\"unity\"\u003eUnity\u003c/h1\u003e\n\u003cp\u003e\u003cimg src=\"/images/blogs/UnityClockPlay.gif\" alt=\"UnityClockPlayGif\"\u003e\u003c/p\u003e\n\u003cp\u003eNow that I had figured out the core math concepts behind how find out the vector when given a angle for the clock it was time to implement the C# code for the object\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c#\" data-lang=\"c#\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eusing\u003c/span\u003e System.Collections.Generic;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eusing\u003c/span\u003e UnityEngine;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eClock\u003c/span\u003e : MonoBehaviour\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e    [SerializeField]\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e Transform _hoursPivot;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e    [SerializeField]\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e Transform _minutesPivot;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e    [SerializeField]\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e Transform _secondsPivot;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e    [SerializeField]\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e ClockMarks;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e    [SerializeField]\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efloat\u003c/span\u003e ClockRadius = \u003cspan style=\"color:#ae81ff\"\u003e4f\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e TimeSpan CurrentDateTime;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efloat\u003c/span\u003e hoursToDegress = \u003cspan style=\"color:#ae81ff\"\u003e0.0f\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efloat\u003c/span\u003e minutesToDegress = \u003cspan style=\"color:#ae81ff\"\u003e0.0f\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efloat\u003c/span\u003e secondsToDegress = \u003cspan style=\"color:#ae81ff\"\u003e0.0f\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e Awake()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        hoursToDegress = (\u003cspan style=\"color:#ae81ff\"\u003e360f\u003c/span\u003e / ClockMarks);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        minutesToDegress = (\u003cspan style=\"color:#ae81ff\"\u003e360f\u003c/span\u003e / \u003cspan style=\"color:#ae81ff\"\u003e60f\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        secondsToDegress = (\u003cspan style=\"color:#ae81ff\"\u003e360f\u003c/span\u003e/\u003cspan style=\"color:#ae81ff\"\u003e60f\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        RotateHandles_Hour();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        RotateHandles_Minutes();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        RotateHandles_Seconds();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e Quaternion GetAngleForClock(\u003cspan style=\"color:#66d9ef\"\u003efloat\u003c/span\u003e pos)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e//the clock face\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        pos = Mathf.Abs(pos % \u003cspan style=\"color:#ae81ff\"\u003e12\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003efloat\u003c/span\u003e angle = (\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e - \u003cspan style=\"color:#ae81ff\"\u003e30\u003c/span\u003e * pos);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e// float angleInRadians = angle * Mathf.PI / 180;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e// float xPos = ClockRadius * Mathf.Cos(angleInRadians);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e// float yPos = ClockRadius * Mathf.Sin(angleInRadians);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e Quaternion.Euler(\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e,angle);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e RotateHandles_Hour()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        _hoursPivot.localRotation = Quaternion.Euler(\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e,-hoursToDegress*(\u003cspan style=\"color:#66d9ef\"\u003efloat\u003c/span\u003e)CurrentDateTime.TotalHours);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e RotateHandles_Minutes()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        _minutesPivot.localRotation =  Quaternion.Euler(\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e,-minutesToDegress * (\u003cspan style=\"color:#66d9ef\"\u003efloat\u003c/span\u003e)CurrentDateTime.TotalMinutes);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e RotateHandles_Seconds()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        _secondsPivot.localRotation =  Quaternion.Euler(\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e,-secondsToDegress * (\u003cspan style=\"color:#66d9ef\"\u003efloat\u003c/span\u003e)CurrentDateTime.TotalSeconds);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e Update()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        CurrentDateTime = DateTime.Now.TimeOfDay;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        RotateHandles_Hour();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        RotateHandles_Minutes();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        RotateHandles_Seconds();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003ethe only change I made here was instead of using radians which I had been working in with GeoGebra I used angle\u0026rsquo;s and utilised unity\u0026rsquo;s Quaternion struct to convert between euler and quaternion.\u003c/p\u003e\n\u003cp\u003eusing unity\u0026rsquo;s update loop and .Net DateTime to work out the current hosts system time I made a functioning clock.\u003c/p\u003e\n\u003ch1 id=\"future-ideas\"\u003eFuture Ideas\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003emake a 24-hour clock\u003c/li\u003e\n\u003cli\u003eanimate an object by moving them along a circular spline\u003c/li\u003e\n\u003c/ul\u003e\n","description":"I go through the math's behind what makes a clock tick including the positioning of the handles and basic triganometry.","image":"/images/blogs/UnityClock.png","permalink":"//localhost:1313/blogs/unityclock/","title":"Math Basics - Unity Clock"},{"content":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eJourney through the mountain is a game I developed for my 2nd year 2nd semester at staffordshire university.\u003c/p\u003e\n\u003cp\u003ethe story behind the development descsion to use Monogame and c# compared to off the shelf game engine such as unity or unreal was I wanted to familurise myself with a typical game loop and game flow.\u003c/p\u003e\n\u003ch2 id=\"status\"\u003eStatus\u003c/h2\u003e\n\u003cp\u003eThe current status of the project is currenty on hold it has a couple of issues still such as the falling mechanic not working quite right and the obvious screen resolution issue, I may re-write the game in a different framework when I revist it.\u003c/p\u003e\n\u003ch2 id=\"summary-of-work\"\u003eSummary of work\u003c/h2\u003e\n\u003cp\u003eI was the solo developer of the game, I planned level\u0026rsquo;s, wrote character interaction, integrated art assets into the game some of the technical work I did were these:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ewrote game loop\u003c/li\u003e\n\u003cli\u003ewrote importer for art assets .png, .wav\u003c/li\u003e\n\u003cli\u003ewrote node editor for character text flow\u003c/li\u003e\n\u003cli\u003ewrote a level editor to iterate through different level designs\u003c/li\u003e\n\u003cli\u003ewrote collision system\u003c/li\u003e\n\u003cli\u003eimplemented enemey simple movement AI\u003c/li\u003e\n\u003cli\u003eimplemented an animation system\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"journey-through-the-mountain---playthrough-video\"\u003eJourney through the mountain - playthrough video\u003c/h2\u003e\n\n\n    \n    \u003cdiv style=\"position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;\"\u003e\n      \u003ciframe allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"allowfullscreen\" loading=\"eager\" referrerpolicy=\"strict-origin-when-cross-origin\" src=\"https://www.youtube.com/embed/g6L4weujXPY?autoplay=0\u0026controls=1\u0026end=0\u0026loop=0\u0026mute=0\u0026start=0\" style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;\" title=\"YouTube video\"\n      \u003e\u003c/iframe\u003e\n    \u003c/div\u003e\n\n\u003ch1 id=\"more-details-on-development\"\u003eMore Details On Development\u003c/h1\u003e\n\u003cp\u003eif you want to know more details keep reading I go over:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003etools I developed\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"level-editor\"\u003eLevel Editor\u003c/h2\u003e\n\n\n    \n    \u003cdiv style=\"position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;\"\u003e\n      \u003ciframe allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"allowfullscreen\" loading=\"eager\" referrerpolicy=\"strict-origin-when-cross-origin\" src=\"https://www.youtube.com/embed/L6dnDOCIKUE?autoplay=0\u0026controls=1\u0026end=0\u0026loop=0\u0026mute=0\u0026start=0\" style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;\" title=\"YouTube video\"\n      \u003e\u003c/iframe\u003e\n    \u003c/div\u003e\n\n\u003cp\u003ethe level editor read and wrote the level details in a binary format which was put into a .Map file which I then wrote an importer to handle loading that data which would build the tiles and all the \u0026ldquo;event blocks\u0026rdquo;\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/projects/MapFiles.png\" alt=\"MapFilesPng\"\u003e\u003c/p\u003e\n\u003cp\u003ethe tiles were all preloaded into the editor based on tilesets that were in the game so as soon as I added in a new tileset into the game it would appear in the editor.\u003c/p\u003e\n\u003cp\u003eessentially all the data structure was for each layer it was a 2d array of tile codes that when parsed read the correct tile from memory and placed it in the correct location in the world space.\u003c/p\u003e\n\u003cp\u003e\u0026ldquo;Event blocks\u0026rdquo; were positions in the world where on level loading they would spawn either a collidable event or a entity itself. if it was a collidable event then it would fire off some delegate after it was collided with by the player.\u003c/p\u003e\n\u003cp\u003ethe red blocks tint on some of the blocks indicated which tiles where collidable as I wanted the player to be able to walk behind/in front of tiles but also have it so there was collision still so I handled that seperatly with these tint indications.\u003c/p\u003e\n","description":"A 2D platformer game about scaling down a magical Mt.Everest ","image":"/projects/JTTM_Cover.png","permalink":"//localhost:1313/projects/jttm/","title":"Journey Through The Mountain"},{"content":"","description":"Screenshots from projects and events :video_game:","image":null,"permalink":"//localhost:1313/gallery/","title":"Gallery"}]